import { useBreakpointValue, useToast, Box, BoxProps, Button, ButtonProps, Center, Flex, Text, Tooltip, TooltipProps } from '@chakra-ui/react';
import { historyField } from '@codemirror/commands';
import { html } from '@codemirror/lang-html';
import { StateField } from '@codemirror/state';
import CodeMirror from '@uiw/react-codemirror';
import Head from 'next/head';
import { useEffect, useRef, useState } from 'react';

import { AppColors, HOVERABLE_CLASS } from '../constant';

// ********************************************************************************
// == Constant ====================================================================
// -- CodeMirror ------------------------------------------------------------------
const STATE_FIELDS = { history: historyField };
const LOCAL_STORAGE_EDITOR_STATE_KEY = 'editorState';
const LOCAL_STORAGE_EDITOR_VALUE_KEY = 'editorValue';

// -- UI --------------------------------------------------------------------------
const TOAST_DURATION = 2500/*T&E*/;

const buttonProps: Partial<ButtonProps> = {
  className: HOVERABLE_CLASS,
  color: AppColors.WHITE,
  backgroundColor: AppColors.PURPLE,
  _active: { color: AppColors.PURPLE, backgroundColor: AppColors.WHITE },
  _hover: { color: AppColors.PURPLE, backgroundColor: AppColors.WHITE },
}

const containerProps: Partial<BoxProps> = {
  padding: '1em',
  flexBasis: '50%',
  overflow: 'auto',
}

const tooltipProps: Partial<TooltipProps> = {
  hasArrow: true,
  placement: 'top',
  color: AppColors.PURPLE,
  backgroundColor: AppColors.WHITE,
  _after: { backgroundColor: AppColors.PURPLE },
}

// == Component ===================================================================
const MainPage = () => {
  const outputDivRef = useRef<HTMLDivElement>(null/*default*/);
  const toast = useToast();

  // -- State ----------------------------------------------------------------------
  const [editorValue, setEditorValue] = useState(''/*default none*/),
        [editorState, setEditorState] = useState<Record<string, StateField<any>>>({/*default empty*/});

  // -- Effect ---------------------------------------------------------------------
  useEffect(() => {
    const editorValue = localStorage.getItem(LOCAL_STORAGE_EDITOR_VALUE_KEY),
          editorState = localStorage.getItem(LOCAL_STORAGE_EDITOR_STATE_KEY);

    setEditorValue(editorValue || '');
    setEditorState(editorState ? JSON.parse(editorState) : '');
  }, []);

  // -- Handler -------------------------------------------------------------------
  const handleSetClipboard = (as: 'text' | 'html') => {
    const { current } = outputDivRef;
    if (!current) return/*not set yet*/;
    if (!editorValue) {
      toast({ description: 'No value to copy', status: 'error', duration: TOAST_DURATION });
      return/*no value*/;
    } /* else -- value exists */

    if (as === 'text') { navigator.clipboard.writeText(current.textContent ?? ''); }
    else { navigator.clipboard.write([new ClipboardItem({ 'text/html': new Blob([current.innerHTML], { type: 'text/html' }) })]); }

    toast({ description: `Copied as ${as === 'text' ? 'Text' : 'HTML'}`, status: 'success', duration: TOAST_DURATION })
  }

  // -- UI ------------------------------------------------------------------------
  return (
    <>
      <Head>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Box
        position='relative'
        width='100vw'
        height='100vh'
        flexDir='column'
        justifyContent='space-between'
        overflowX='auto'
        overflowY='auto'
        color={AppColors.WHITE}
        backgroundColor={AppColors.BLACK_1}
      >
        <Box padding='2em'>
          <Text
            padding='0.25em'
            backgroundColor={AppColors.PURPLE}
            borderRadius='16px'
            width='fit-content'
            fontSize={useBreakpointValue({ base: '1.5em', md: '2.5em' })}
            fontWeight='bold'
          >
            Clipboard Injector
          </Text>
        </Box>
        <Box padding='2em'>
          <Flex
            backgroundColor={AppColors.BLACK_2}
            borderRadius='16px'
            maxHeight='60%'
            height='100%'
            flexDir={useBreakpointValue({ base: 'column', md: 'row' })}
            minHeight={useBreakpointValue({ base: '', md: '60vh' })}
          >
            <Box  {...containerProps} overflow={'auto'}>
              <Center padding='2em' gap='5em'>
                <Tooltip label='Copy the text content of the rendered HTML' {...tooltipProps}>
                  <Button {...buttonProps} onClick={() => handleSetClipboard('text')}>
                    {useBreakpointValue({ base: 'Text', md: 'Copy as Text' })}
                  </Button>
                </Tooltip>
                <Tooltip label='Copy the rendered HTML' {...tooltipProps}>
                  <Button {...buttonProps} onClick={() => handleSetClipboard('html')}>
                    {useBreakpointValue({ base: 'HTML', md: 'Copy as HTML' })}
                  </Button>
                </Tooltip>
              </Center>
              <CodeMirror
                value={editorValue}
                initialState={editorState ? { json: editorState, fields: STATE_FIELDS } : undefined}
                height='42vh'
                maxHeight='42vh'
                theme='dark'
                extensions={[html()]}
                indentWithTab={false}
                autoFocus={true}
                onChange={(value, viewUpdate) => {
                  const state = viewUpdate.state.toJSON(STATE_FIELDS);

                  localStorage.setItem(LOCAL_STORAGE_EDITOR_VALUE_KEY, value);
                  localStorage.setItem(LOCAL_STORAGE_EDITOR_STATE_KEY, JSON.stringify(state));

                  setEditorValue(value);
                  setEditorState(state);
                }}
              />
            </Box>
            <Box {...containerProps}>
              <Box
                padding='1em'
                height='56vh'
                maxHeight='56vh'
                overflow='auto'
                outline={`1px solid ${AppColors.WHITE_2}`}
                borderRadius='16px'
              >
                <div ref={outputDivRef} style={{ all: 'revert'/*remove all styles*/ }} dangerouslySetInnerHTML={{ __html: editorValue.length ? editorValue : '<div>The rendered Text or HTML will appear here</div>' }} />
              </Box>
            </Box>
          </Flex>
        </Box>
      </Box >
    </>
  )
}

export default MainPage;