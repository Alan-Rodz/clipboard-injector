import { useBreakpointValue, useToast, Box, Button, Center, Flex, Text, Tooltip } from '@chakra-ui/react';
import { html } from '@codemirror/lang-html';
import { StateField } from '@codemirror/state';
import { ViewUpdate } from '@codemirror/view';
import CodeMirror from '@uiw/react-codemirror';
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useRef, useState } from 'react';
import { format as prettierFormat } from 'prettier';
import htmlParser from 'prettier/parser-html';

import { LOCAL_STORAGE_EDITOR_VALUE_KEY, LOCAL_STORAGE_EDITOR_STATE_KEY, STATE_FIELDS } from '../constant/codeMirror';
import { boxProps, buttonProps, tooltipProps, AppColors, TOAST_DURATION } from '../constant/ui';

// ********************************************************************************
const MainPage = () => {
  const outputDivRef = useRef<HTMLDivElement>(null/*default*/);
  const toast = useToast();

  // -- State ----------------------------------------------------------------------
  const [editorValue, setEditorValue] = useState(''/*default*/),
        [editorState, setEditorState] = useState<Record<string, StateField<unknown>>>({/*default*/});

  // -- Effect ---------------------------------------------------------------------
  useEffect(() => {
    const editorValue = localStorage.getItem(LOCAL_STORAGE_EDITOR_VALUE_KEY),
          editorState = localStorage.getItem(LOCAL_STORAGE_EDITOR_STATE_KEY);
    if(!editorValue || !editorState) return/*nothing to do*/;

    setEditorValue(editorValue || ''/*default*/);
    setEditorState(JSON.parse(editorState));
  }, []);

  // -- Handler -------------------------------------------------------------------
  const handleSetClipboard = (as: 'text' | 'html') => {
    const { current } = outputDivRef;
    if(!current) return/*not set yet*/;
    if(!editorValue) {
      toast({ description: 'No value to copy', status: 'error', duration: TOAST_DURATION });
      return/*nothing to do*/;
    } /* else -- value exists */

    if(as === 'text') navigator.clipboard.writeText(current.textContent ?? '');
    else navigator.clipboard.write([new ClipboardItem({ 'text/html': new Blob([current.innerHTML], { type: 'text/html' }) })]);

    toast({ description: `Copied as ${as === 'text' ? 'Text' : 'HTML'}`, status: 'success', duration: TOAST_DURATION })
  }

  const handleFormat = () => {
    if(!editorValue) {
      toast({ description: 'No value to format', status: 'error', duration: TOAST_DURATION });
      return/*no value*/;
    } /* else -- value exists */

    const formattedValue = prettierFormat(editorValue, { parser: 'html', plugins: [htmlParser] });
    setEditorValue(formattedValue);
  }

  const handleCodeMirrorChange = (editorValue: string, viewUpdate: ViewUpdate) => {
    const state = viewUpdate.state.toJSON(STATE_FIELDS);

    try {
      localStorage.setItem(LOCAL_STORAGE_EDITOR_VALUE_KEY, editorValue);
      localStorage.setItem(LOCAL_STORAGE_EDITOR_STATE_KEY, JSON.stringify(state));
    } catch (error) {
      console.warn('Failed to save to local storage', error);
    }

    setEditorValue(editorValue);
    setEditorState(state);
  }

  // -- UI ------------------------------------------------------------------------
  return (
    <>
      <Head>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Box
        position='relative'
        width='100vw'
        height='100vh'
        flexDir='column'
        justifyContent='space-between'
        overflowX='auto'
        overflowY='auto'
        color={AppColors.WHITE}
        backgroundColor={AppColors.BLACK_1}
      >
        <Box padding='2em'>
          <Text
            padding='0.25em'
            width='fit-content'
            borderRadius='16px'
            backgroundColor={AppColors.PURPLE}
            fontWeight='bold'
            fontSize={useBreakpointValue({ base: '1.5em', md: '2.5em' })}
          >
            Clipboard Injector
          </Text>
        </Box>
        <Box padding='1em'>
          <Flex
            flexDir={useBreakpointValue({ base: 'column', md: 'row' })}
            minHeight={useBreakpointValue({ base: '', md: '60vh' })}
            maxHeight='60%'
            height='100%'
            backgroundColor={AppColors.BLACK_2}
            borderRadius='16px'
          >
            <Box  {...boxProps} overflow={'auto'}>
              <Center padding='2em' justifyContent='space-between'>
                <Tooltip label='Format the Input as HTML' {...tooltipProps}>
                  <Button {...buttonProps} onClick={() => handleFormat()}>
                    Format
                  </Button>
                </Tooltip>
                <Tooltip label='Copy the text content of the rendered HTML' {...tooltipProps}>
                  <Button {...buttonProps} onClick={() => handleSetClipboard('text')}>
                    {useBreakpointValue({ base: 'Text', md: 'Copy as Text' })}
                  </Button>
                </Tooltip>

                <Tooltip label='Copy the rendered HTML' {...tooltipProps}>
                  <Button {...buttonProps} onClick={() => handleSetClipboard('html')}>
                    {useBreakpointValue({ base: 'HTML', md: 'Copy as HTML' })}
                  </Button>
                </Tooltip>
              </Center>
              <CodeMirror
                value={editorValue}
                initialState={Object.keys(editorState).length ? { json: editorState, fields: STATE_FIELDS } : undefined/*no initial state to load*/}
                height='42vh'
                maxHeight='42vh'
                theme='dark'
                extensions={[html()]}
                indentWithTab={false}
                autoFocus={true}
                onChange={(value, viewUpdate) => handleCodeMirrorChange(value, viewUpdate)}
              />
            </Box>
            <Box {...boxProps}>
              <Box
                padding='1em'
                height='56vh'
                maxHeight='56vh'
                overflow='auto'
                outline={`1px solid ${AppColors.WHITE_2}`}
                borderRadius='16px'
              >
                <div ref={outputDivRef} style={{ all: 'revert'/*remove all styles*/ }} dangerouslySetInnerHTML={{ __html: editorValue.length ? editorValue : '<div>The rendered HTML will appear here</div>' }} />
              </Box>
            </Box>
          </Flex>
        </Box>
        <Center flexDir='column' marginBottom='1em'>
          <Text marginBottom='1em'>A tool to set the contents of the clipboard explicitly</Text>
          <Text>See the <Link href='https://github.com/Alan-Rodz/clipboard-injector' style={{ textDecoration: 'underline' }}>source code</Link> on GitHub</Text>
        </Center>
      </Box >
    </>
  )
}

export default MainPage;